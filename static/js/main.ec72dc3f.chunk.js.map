{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","App","state","errorMessage","console","log","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","error","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,oBACNC,SAAU,YA2BCE,EAfO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAEJP,EAAaS,GAAhCP,EAFuB,EAEvBA,KAAMC,EAFiB,EAEjBA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BACGD,GAEH,uBAAGU,UAAS,6BAAwBT,EAAxB,aC9BZU,EAAS,SAACP,GACd,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKjDD,EAAOE,aAAe,CACpBD,QAAS,cAGID,QCRTG,E,4MACJC,MAAQ,CACNV,IAAK,KACLW,aAAc,I,kEAGK,IAAD,OAClBC,QAAQC,IAAI,qBACZC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEnB,IAAKkB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAW,EAAKH,SAAS,CAAER,aAAcW,EAAMf,e,sCAKjD,OAAIgB,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMV,IAClC,uCAAauB,KAAKb,MAAMC,eAG5BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMV,IAClC,kBAAC,EAAD,CAAeA,IAAKuB,KAAKb,MAAMV,MAGjC,kBAAC,EAAD,CAAQO,QAAQ,qC,+BAIvB,OACE,yBAAKF,UAAU,OACZkB,KAAKC,qB,GA7BIC,IAAMC,WAmCxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.ec72dc3f.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\"\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach!\",\n    iconName: \"sun\"\n  },\n  winter: {\n    text: \"Burr, it is cold!\",\n    iconName: \"winter\"\n  }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>\n        {text}\n      </h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Loader = (props) => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nLoader.defaultProps = {\n  message: \"Loading...\"\n};\n\nexport default Loader;\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Loader from \"./Loader\";\n\nclass App extends React.Component {\n  state = {\n    lat: null,\n    errorMessage: \"\"\n  };\n\n  componentDidMount() {\n    console.log(\"component mounted\");\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (error) => this.setState({ errorMessage: error.message })\n    );\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n\n    return <Loader message=\"Please accept location request\" />;\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}